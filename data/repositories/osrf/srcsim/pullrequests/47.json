{"rendered": {"description": {"raw": "This builds on top of pull request #44\r\n\r\nUse the touch plugin to check when the robot has been the only thing touching the cable's tip (its last link) continuously for 0.5 seconds.\r\n\r\n## How to test\r\n\r\n1. Skip to 2/4:\r\n\r\n        rosservice call /srcsim/finals/start_task 2 4\r\n\r\n1. The robot will be teleported to face the array and you'll see this message:\r\n\r\n        [Msg] Task [2] - Checkpoint [4] - Started (30 293000000)\r\n        success: True\r\n        [Msg] Started touch plugin [task2/checkpoint4]\r\n\r\n1. Now\u2026 figure out a way to pick up the cable and verify it works :) I test this with a combination of @scpeters 's [grasping controller](https://github.com/scpeters/val_grasping) and using the [Force/Torque dialog](http://gazebosim.org/tutorials?tut=apply_force_torque) to push the cable towards Val's hand.\r\n\r\n    (i.e. Pause the world, apply between 100 ~ 400 N in the desired direction, step the world a few times to see how the cable is moving, then apply force again\u2026 Until the cable is inside the hand. Make the hand close, then step more and adjust the cable as needed. Not elegant, I know\u2026)\r\n\r\n1. While the grasping is halfway there and choppy, your terminal will be spammed like:\r\n\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 268000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 303000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 325000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 346000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 357000000 seconds\r\n        \u2026\r\n\r\n1. Then finally you get a good grip:\r\n\r\n    ![](data/bitbucket.org/repo/xEbAAe/images/2661890985-t2cp4.png)\r\n\r\n1. Wait ~~5~~ 0.5 seconds, and the checkpoint is complete:\r\n\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 675000000 seconds\r\n        [Msg] Model [solar_panel_cable] touched [valkyrie] exclusively for 0 500000000 seconds\r\n        [Msg] Stopped touch plugin [task2/checkpoint4]\r\n        [Msg] Task [2] - Checkpoint [4] - Completed (50 677000000)\r\n        [Msg] Task [2] - Checkpoint [5] - Started (50 677000000)\r\n\r\n\u200c\r\n\r\n\u200c", "markup": "markdown", "html": "<p>This builds on top of <a href=\"#!/osrf/srcsim/pull-requests/44/task-2-checkpoint-1-touchcheckpoint\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #44</a></p>\n<p>Use the touch plugin to check when the robot has been the only thing touching the cable's tip (its last link) continuously for 0.5 seconds.</p>\n<h2 id=\"markdown-header-how-to-test\">How to test</h2>\n<ol>\n<li>\n<p>Skip to 2/4:</p>\n<div class=\"codehilite\"><pre><span></span>rosservice call /srcsim/finals/start_task 2 4\n</pre></div>\n\n\n</li>\n<li>\n<p>The robot will be teleported to face the array and you'll see this message:</p>\n<div class=\"codehilite\"><pre><span></span>[Msg] Task [2] - Checkpoint [4] - Started (30 293000000)\nsuccess: True\n[Msg] Started touch plugin [task2/checkpoint4]\n</pre></div>\n\n\n</li>\n<li>\n<p>Now\u2026 figure out a way to pick up the cable and verify it works :) I test this with a combination of @scpeters 's <a data-is-external-link=\"true\" href=\"https://github.com/scpeters/val_grasping\" rel=\"nofollow\">grasping controller</a> and using the <a data-is-external-link=\"true\" href=\"http://gazebosim.org/tutorials?tut=apply_force_torque\" rel=\"nofollow\">Force/Torque dialog</a> to push the cable towards Val's hand.</p>\n<p>(i.e. Pause the world, apply between 100 ~ 400 N in the desired direction, step the world a few times to see how the cable is moving, then apply force again\u2026 Until the cable is inside the hand. Make the hand close, then step more and adjust the cable as needed. Not elegant, I know\u2026)</p>\n</li>\n<li>\n<p>While the grasping is halfway there and choppy, your terminal will be spammed like:</p>\n<div class=\"codehilite\"><pre><span></span>[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 268000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 303000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 325000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 346000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 357000000 seconds\n\u2026\n</pre></div>\n\n\n</li>\n<li>\n<p>Then finally you get a good grip:</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/xEbAAe/images/2661890985-t2cp4.png\" /></p>\n</li>\n<li>\n<p>Wait <del>5</del> 0.5 seconds, and the checkpoint is complete:</p>\n<div class=\"codehilite\"><pre><span></span>[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 675000000 seconds\n[Msg] Model [solar_panel_cable] touched [valkyrie] exclusively for 0 500000000 seconds\n[Msg] Stopped touch plugin [task2/checkpoint4]\n[Msg] Task [2] - Checkpoint [4] - Completed (50 677000000)\n[Msg] Task [2] - Checkpoint [5] - Started (50 677000000)\n</pre></div>\n\n\n</li>\n</ol>\n<p>\u200c</p>\n<p>\u200c</p>", "type": "rendered"}, "title": {"raw": "Task 2 Checkpoint 4", "markup": "markdown", "html": "<p>Task 2 Checkpoint 4</p>", "type": "rendered"}}, "type": "pullrequest", "description": "This builds on top of pull request #44\r\n\r\nUse the touch plugin to check when the robot has been the only thing touching the cable's tip (its last link) continuously for 0.5 seconds.\r\n\r\n## How to test\r\n\r\n1. Skip to 2/4:\r\n\r\n        rosservice call /srcsim/finals/start_task 2 4\r\n\r\n1. The robot will be teleported to face the array and you'll see this message:\r\n\r\n        [Msg] Task [2] - Checkpoint [4] - Started (30 293000000)\r\n        success: True\r\n        [Msg] Started touch plugin [task2/checkpoint4]\r\n\r\n1. Now\u2026 figure out a way to pick up the cable and verify it works :) I test this with a combination of @scpeters 's [grasping controller](https://github.com/scpeters/val_grasping) and using the [Force/Torque dialog](http://gazebosim.org/tutorials?tut=apply_force_torque) to push the cable towards Val's hand.\r\n\r\n    (i.e. Pause the world, apply between 100 ~ 400 N in the desired direction, step the world a few times to see how the cable is moving, then apply force again\u2026 Until the cable is inside the hand. Make the hand close, then step more and adjust the cable as needed. Not elegant, I know\u2026)\r\n\r\n1. While the grasping is halfway there and choppy, your terminal will be spammed like:\r\n\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 268000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 303000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 325000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 346000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 357000000 seconds\r\n        \u2026\r\n\r\n1. Then finally you get a good grip:\r\n\r\n    ![](data/bitbucket.org/repo/xEbAAe/images/2661890985-t2cp4.png)\r\n\r\n1. Wait ~~5~~ 0.5 seconds, and the checkpoint is complete:\r\n\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 675000000 seconds\r\n        [Msg] Model [solar_panel_cable] touched [valkyrie] exclusively for 0 500000000 seconds\r\n        [Msg] Stopped touch plugin [task2/checkpoint4]\r\n        [Msg] Task [2] - Checkpoint [4] - Completed (50 677000000)\r\n        [Msg] Task [2] - Checkpoint [5] - Started (50 677000000)\r\n\r\n\u200c\r\n\r\n\u200c", "links": {"decline": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/pullrequests/47/decline"}, "diffstat": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/diffstat/osrf/srcsim:829b98be9075%0D5c4198fd616f?from_pullrequest_id=47"}, "commits": {"href": "data/repositories/osrf/srcsim/pullrequests/47/commits.json"}, "self": {"href": "data/repositories/osrf/srcsim/pullrequests/47.json"}, "comments": {"href": "data/repositories/osrf/srcsim/pullrequests/47/comments_page=1.json"}, "merge": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/pullrequests/47/merge"}, "html": {"href": "#!/osrf/srcsim/pull-requests/47"}, "activity": {"href": "data/repositories/osrf/srcsim/pullrequests/47/activity.json"}, "diff": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/diff/osrf/srcsim:829b98be9075%0D5c4198fd616f?from_pullrequest_id=47"}, "approve": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/pullrequests/47/approve"}, "statuses": {"href": "data/repositories/osrf/srcsim/pullrequests/47/statuses_page=1.json"}}, "title": "Task 2 Checkpoint 4", "close_source_branch": true, "reviewers": [], "id": 47, "destination": {"commit": {"hash": "5c4198fd616f", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/srcsim/commit/5c4198fd616f.json"}, "html": {"href": "#!/osrf/srcsim/commits/5c4198fd616f"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/srcsim.json"}, "html": {"href": "#!/osrf/srcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c41021d9-0217-4628-999d-7f8d82f98dcb}ts=c_plus_plus"}}, "type": "repository", "name": "srcsim", "full_name": "osrf/srcsim", "uuid": "{c41021d9-0217-4628-999d-7f8d82f98dcb}"}, "branch": {"name": "default"}}, "created_on": "2017-03-21T03:12:52.327106+00:00", "summary": {"raw": "This builds on top of pull request #44\r\n\r\nUse the touch plugin to check when the robot has been the only thing touching the cable's tip (its last link) continuously for 0.5 seconds.\r\n\r\n## How to test\r\n\r\n1. Skip to 2/4:\r\n\r\n        rosservice call /srcsim/finals/start_task 2 4\r\n\r\n1. The robot will be teleported to face the array and you'll see this message:\r\n\r\n        [Msg] Task [2] - Checkpoint [4] - Started (30 293000000)\r\n        success: True\r\n        [Msg] Started touch plugin [task2/checkpoint4]\r\n\r\n1. Now\u2026 figure out a way to pick up the cable and verify it works :) I test this with a combination of @scpeters 's [grasping controller](https://github.com/scpeters/val_grasping) and using the [Force/Torque dialog](http://gazebosim.org/tutorials?tut=apply_force_torque) to push the cable towards Val's hand.\r\n\r\n    (i.e. Pause the world, apply between 100 ~ 400 N in the desired direction, step the world a few times to see how the cable is moving, then apply force again\u2026 Until the cable is inside the hand. Make the hand close, then step more and adjust the cable as needed. Not elegant, I know\u2026)\r\n\r\n1. While the grasping is halfway there and choppy, your terminal will be spammed like:\r\n\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 268000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 303000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 325000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 346000000 seconds\r\n        [Msg] Not touching anything\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 357000000 seconds\r\n        \u2026\r\n\r\n1. Then finally you get a good grip:\r\n\r\n    ![](data/bitbucket.org/repo/xEbAAe/images/2661890985-t2cp4.png)\r\n\r\n1. Wait ~~5~~ 0.5 seconds, and the checkpoint is complete:\r\n\r\n        [Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 675000000 seconds\r\n        [Msg] Model [solar_panel_cable] touched [valkyrie] exclusively for 0 500000000 seconds\r\n        [Msg] Stopped touch plugin [task2/checkpoint4]\r\n        [Msg] Task [2] - Checkpoint [4] - Completed (50 677000000)\r\n        [Msg] Task [2] - Checkpoint [5] - Started (50 677000000)\r\n\r\n\u200c\r\n\r\n\u200c", "markup": "markdown", "html": "<p>This builds on top of <a href=\"#!/osrf/srcsim/pull-requests/44/task-2-checkpoint-1-touchcheckpoint\" rel=\"nofollow\" class=\"ap-connect-link\">pull request #44</a></p>\n<p>Use the touch plugin to check when the robot has been the only thing touching the cable's tip (its last link) continuously for 0.5 seconds.</p>\n<h2 id=\"markdown-header-how-to-test\">How to test</h2>\n<ol>\n<li>\n<p>Skip to 2/4:</p>\n<div class=\"codehilite\"><pre><span></span>rosservice call /srcsim/finals/start_task 2 4\n</pre></div>\n\n\n</li>\n<li>\n<p>The robot will be teleported to face the array and you'll see this message:</p>\n<div class=\"codehilite\"><pre><span></span>[Msg] Task [2] - Checkpoint [4] - Started (30 293000000)\nsuccess: True\n[Msg] Started touch plugin [task2/checkpoint4]\n</pre></div>\n\n\n</li>\n<li>\n<p>Now\u2026 figure out a way to pick up the cable and verify it works :) I test this with a combination of @scpeters 's <a data-is-external-link=\"true\" href=\"https://github.com/scpeters/val_grasping\" rel=\"nofollow\">grasping controller</a> and using the <a data-is-external-link=\"true\" href=\"http://gazebosim.org/tutorials?tut=apply_force_torque\" rel=\"nofollow\">Force/Torque dialog</a> to push the cable towards Val's hand.</p>\n<p>(i.e. Pause the world, apply between 100 ~ 400 N in the desired direction, step the world a few times to see how the cable is moving, then apply force again\u2026 Until the cable is inside the hand. Make the hand close, then step more and adjust the cable as needed. Not elegant, I know\u2026)</p>\n</li>\n<li>\n<p>While the grasping is halfway there and choppy, your terminal will be spammed like:</p>\n<div class=\"codehilite\"><pre><span></span>[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 268000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 303000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 325000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 346000000 seconds\n[Msg] Not touching anything\n[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 357000000 seconds\n\u2026\n</pre></div>\n\n\n</li>\n<li>\n<p>Then finally you get a good grip:</p>\n<p><img alt=\"\" src=\"data/bitbucket.org/repo/xEbAAe/images/2661890985-t2cp4.png\" /></p>\n</li>\n<li>\n<p>Wait <del>5</del> 0.5 seconds, and the checkpoint is complete:</p>\n<div class=\"codehilite\"><pre><span></span>[Msg] Model [solar_panel_cable] started touching [valkyrie] at 45 675000000 seconds\n[Msg] Model [solar_panel_cable] touched [valkyrie] exclusively for 0 500000000 seconds\n[Msg] Stopped touch plugin [task2/checkpoint4]\n[Msg] Task [2] - Checkpoint [4] - Completed (50 677000000)\n[Msg] Task [2] - Checkpoint [5] - Started (50 677000000)\n</pre></div>\n\n\n</li>\n</ol>\n<p>\u200c</p>\n<p>\u200c</p>", "type": "rendered"}, "source": {"commit": {"hash": "66ca6f87a49c", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/srcsim/commit/66ca6f87a49c.json"}, "html": {"href": "#!/osrf/srcsim/commits/66ca6f87a49c"}}}, "repository": {"links": {"self": {"href": "data/repositories/osrf/srcsim.json"}, "html": {"href": "#!/osrf/srcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c41021d9-0217-4628-999d-7f8d82f98dcb}ts=c_plus_plus"}}, "type": "repository", "name": "srcsim", "full_name": "osrf/srcsim", "uuid": "{c41021d9-0217-4628-999d-7f8d82f98dcb}"}, "branch": {"name": "t2cp4"}}, "comment_count": 4, "state": "MERGED", "task_count": 0, "participants": [{"role": "PARTICIPANT", "participated_on": "2017-03-30T18:54:34.150184+00:00", "type": "participant", "approved": true, "user": {"display_name": "Carlos Ag\u00fcero", "uuid": "{da8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D"}, "html": {"href": "https://bitbucket.org/%7Bda8a8e89-4bb0-421b-bd0e-dbbed3d4ed6a%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/692bf15758111acaddae4da15a47f9e5d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsCA-0.png"}}, "nickname": "caguero", "type": "user", "account_id": "557058:4ded1ddf-947e-4154-bbd1-3dba24f1bdbd"}}, {"role": "PARTICIPANT", "participated_on": "2017-03-30T20:07:06.516160+00:00", "type": "participant", "approved": false, "user": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}, {"role": "PARTICIPANT", "participated_on": "2017-03-30T20:21:42.715024+00:00", "type": "participant", "approved": false, "user": {"display_name": "Rud Merriam", "uuid": "{79efa10c-b8b6-4b55-9d05-7d0057e235cb}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B79efa10c-b8b6-4b55-9d05-7d0057e235cb%7D"}, "html": {"href": "https://bitbucket.org/%7B79efa10c-b8b6-4b55-9d05-7d0057e235cb%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:c6ed1bc6-3112-49ac-9453-b3846fe562dc/5c7bde69-befb-417b-9aae-9db0c9a59777/128"}}, "nickname": "rmerriam", "type": "user", "account_id": "557058:c6ed1bc6-3112-49ac-9453-b3846fe562dc"}}], "reason": "", "updated_on": "2017-03-30T20:46:36.506134+00:00", "author": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}, "merge_commit": {"hash": "829b98be9075", "type": "commit", "links": {"self": {"href": "data/repositories/osrf/srcsim/commit/829b98be9075.json"}, "html": {"href": "#!/osrf/srcsim/commits/829b98be9075"}}}, "closed_by": {"display_name": "Louise Poubel", "uuid": "{5cfa2075-477b-4ded-bdb9-8d2479544ec4}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D"}, "html": {"href": "https://bitbucket.org/%7B5cfa2075-477b-4ded-bdb9-8d2479544ec4%7D/"}, "avatar": {"href": "https://avatar-management--avatars.us-west-2.prod.public.atl-paas.net/557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8/7d903d90-c5ea-4182-b7ef-0d467e9e1c74/128"}}, "nickname": "chapulina", "type": "user", "account_id": "557058:6ff86fcb-b7ab-44a5-b8a6-f6d9cae8b6e8"}}