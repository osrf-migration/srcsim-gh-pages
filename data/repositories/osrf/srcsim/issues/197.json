{"priority": "minor", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/srcsim.json"}, "html": {"href": "#!/osrf/srcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c41021d9-0217-4628-999d-7f8d82f98dcb}ts=c_plus_plus"}}, "type": "repository", "name": "srcsim", "full_name": "osrf/srcsim", "uuid": "{c41021d9-0217-4628-999d-7f8d82f98dcb}"}, "links": {"attachments": {"href": "data/repositories/osrf/srcsim/issues/197/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/srcsim/issues/197.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/issues/197/watch"}, "comments": {"href": "data/repositories/osrf/srcsim/issues/197/comments_page=1.json"}, "html": {"href": "#!/osrf/srcsim/issues/197/multisense_state_publisher-and"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/issues/197/vote"}}, "reporter": {"display_name": "Steven Gray", "uuid": "{7470e809-c304-4b17-b986-685f31fa15c3}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B7470e809-c304-4b17-b986-685f31fa15c3%7D"}, "html": {"href": "https://bitbucket.org/%7B7470e809-c304-4b17-b986-685f31fa15c3%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/e6bee642b76507eb51c2839771722e68d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsSG-0.png"}}, "nickname": "stgray", "type": "user", "account_id": "557058:e6cc7c7b-9d1b-4abe-87d5-5f0da7c863e1"}, "title": "multisense_state_publisher and robot_state_publisher publish conflicting TF for MS lidar", "component": {"name": "robot", "links": {"self": {"href": "data/repositories/osrf/srcsim/components/395698.json"}}}, "votes": 0, "watches": 5, "content": {"raw": "I want to make sure everything is kosher with how I'm getting the multisense lidar to work.  The issue is that both the `robot_state_publisher` (subscribed to `/ihmc_ros/valkyrie/output/joint_states`) and `multisense_state_publisher` are both publishing a TF transform for the lidar.  However, `/ihmc_ros/valkyrie/output/joint_states` always has a zero angle for the lidar, so they fight [as shown here](https://www.youtube.com/watch?v=BvZK49Wzt3A)\r\n\r\n\r\nThere's a workaround from #15 (see the last post); I have something similar in my bringup launch file.  The worry is that it ends up replacing the `robot_state_publisher` running on the sim machine with my own version, subscribed instead to `/hardware_joint_states` and `/multisense/joint_states`.\r\n\r\nUltimately, my question is: will we have access to `/hardware_joint_states` and is it okay to run my own `robot_state_publisher` which forces the one on the sim machine to shut down? Or is it worth fixing at this point?\r\n\r\n\r\nTo reproduce -- nothing of mine running, just srcsim:\r\n```\r\nroslaunch srcsim unique_task1.launch init:=true\r\nrostopic pub /multisense/set_spindle_speed std_msgs/Float64 \"data: 1.0\" \r\n```", "markup": "markdown", "html": "<p>I want to make sure everything is kosher with how I'm getting the multisense lidar to work.  The issue is that both the <code>robot_state_publisher</code> (subscribed to <code>/ihmc_ros/valkyrie/output/joint_states</code>) and <code>multisense_state_publisher</code> are both publishing a TF transform for the lidar.  However, <code>/ihmc_ros/valkyrie/output/joint_states</code> always has a zero angle for the lidar, so they fight <a data-is-external-link=\"true\" href=\"https://www.youtube.com/watch?v=BvZK49Wzt3A\" rel=\"nofollow\">as shown here</a></p>\n<p>There's a workaround from <a href=\"#!/osrf/srcsim/issues/15/hokuyo-link-not-spinning-in-rviz\" rel=\"nofollow\" title=\"Hokuyo link not spinning in Rviz\" class=\"ap-connect-link\"><s>#15</s></a> (see the last post); I have something similar in my bringup launch file.  The worry is that it ends up replacing the <code>robot_state_publisher</code> running on the sim machine with my own version, subscribed instead to <code>/hardware_joint_states</code> and <code>/multisense/joint_states</code>.</p>\n<p>Ultimately, my question is: will we have access to <code>/hardware_joint_states</code> and is it okay to run my own <code>robot_state_publisher</code> which forces the one on the sim machine to shut down? Or is it worth fixing at this point?</p>\n<p>To reproduce -- nothing of mine running, just srcsim:</p>\n<div class=\"codehilite\"><pre><span></span>roslaunch srcsim unique_task1.launch init:=true\nrostopic pub /multisense/set_spindle_speed std_msgs/Float64 &quot;data: 1.0&quot; \n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-05-31T19:31:01.872507+00:00", "milestone": null, "updated_on": "2017-06-10T14:13:24.412074+00:00", "type": "issue", "id": 197}