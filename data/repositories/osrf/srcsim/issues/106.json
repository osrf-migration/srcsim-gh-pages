{"priority": "major", "kind": "bug", "repository": {"links": {"self": {"href": "data/repositories/osrf/srcsim.json"}, "html": {"href": "#!/osrf/srcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c41021d9-0217-4628-999d-7f8d82f98dcb}ts=c_plus_plus"}}, "type": "repository", "name": "srcsim", "full_name": "osrf/srcsim", "uuid": "{c41021d9-0217-4628-999d-7f8d82f98dcb}"}, "links": {"attachments": {"href": "data/repositories/osrf/srcsim/issues/106/attachments_page=1.json"}, "self": {"href": "data/repositories/osrf/srcsim/issues/106.json"}, "watch": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/issues/106/watch"}, "comments": {"href": "data/repositories/osrf/srcsim/issues/106/comments_page=1.json"}, "html": {"href": "#!/osrf/srcsim/issues/106/world-frame-does-not-go-with-tf-across"}, "vote": {"href": "https://api.bitbucket.org/2.0/repositories/osrf/srcsim/issues/106/vote"}}, "reporter": {"display_name": "dan", "uuid": "{a93bd0ec-35fc-49a5-aa8a-b0b57403c2d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba93bd0ec-35fc-49a5-aa8a-b0b57403c2d0%7D"}, "html": {"href": "https://bitbucket.org/%7Ba93bd0ec-35fc-49a5-aa8a-b0b57403c2d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dd56d3105d7602d83d5c35a320f6b36cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsD-6.png"}}, "nickname": "dan77062", "type": "user", "account_id": "557058:e0e36946-cb60-4776-8f47-2e9a0285ad35"}, "title": "world frame does not go with tf across network", "component": null, "votes": 3, "watches": 10, "content": {"raw": "In trying to work as we will in the real run, I am sending commands and receiving data across a network, with one machine running the sim and another doing the commanding.\r\n\r\nI am able to use tools like rviz and send commands for joints to move just fine with the typical ROS network setup.  However, the world frame does not exist in tf, it is only from gazebo, so the programs that use transformations from world fail.\r\n\r\nHow do we get the gazebo world frame over a network connection like we will use for the actual competition?  I could create a transform broadcaster on the sim machine to connect world to pelvis in tf, but I am concerned that that will create conflicts with the world frame that is being broadcast by gazebo.  Also, that would require running a node on the cloud machine during the competition.\r\n\r\nFor example, the test program walk_test.py fails over a network connection with this error:\r\n\r\n```\r\n#!python\r\npython walk_test.py\r\n\r\nTraceback (most recent call last):\r\n  File \"walk_test.py\", line 122, in <module>\r\n    walkTest()\r\n  File \"walk_test.py\", line 28, in walkTest\r\n    msg.footstep_data_list.append(createFootStepOffset(FootstepDataRosMessage.LEFT, [0.2, 0.0, 0.0]))\r\n  File \"walk_test.py\", line 63, in createFootStepOffset\r\n    footstep = createFootStepInPlace(stepSide)\r\n  File \"walk_test.py\", line 55, in createFootStepInPlace\r\n    footWorld = tfBuffer.lookup_transform('world', foot_frame, rospy.Time())\r\n  File \"/opt/ros/indigo/lib/python2.7/dist-packages/tf2_ros/buffer.py\", line 87, in lookup_transform\r\n    return self.lookup_transform_core(target_frame, source_frame, time)\r\ntf2.LookupException: \"world\" passed to lookupTransform argument target_frame does not exist. \r\n```", "markup": "markdown", "html": "<p>In trying to work as we will in the real run, I am sending commands and receiving data across a network, with one machine running the sim and another doing the commanding.</p>\n<p>I am able to use tools like rviz and send commands for joints to move just fine with the typical ROS network setup.  However, the world frame does not exist in tf, it is only from gazebo, so the programs that use transformations from world fail.</p>\n<p>How do we get the gazebo world frame over a network connection like we will use for the actual competition?  I could create a transform broadcaster on the sim machine to connect world to pelvis in tf, but I am concerned that that will create conflicts with the world frame that is being broadcast by gazebo.  Also, that would require running a node on the cloud machine during the competition.</p>\n<p>For example, the test program walk_test.py fails over a network connection with this error:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"n\">python</span> <span class=\"n\">walk_test</span><span class=\"o\">.</span><span class=\"n\">py</span>\n\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;walk_test.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">122</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span>\n    <span class=\"n\">walkTest</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;walk_test.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">walkTest</span>\n    <span class=\"n\">msg</span><span class=\"o\">.</span><span class=\"n\">footstep_data_list</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">createFootStepOffset</span><span class=\"p\">(</span><span class=\"n\">FootstepDataRosMessage</span><span class=\"o\">.</span><span class=\"n\">LEFT</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"mf\">0.0</span><span class=\"p\">]))</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;walk_test.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">63</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">createFootStepOffset</span>\n    <span class=\"n\">footstep</span> <span class=\"o\">=</span> <span class=\"n\">createFootStepInPlace</span><span class=\"p\">(</span><span class=\"n\">stepSide</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;walk_test.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">55</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">createFootStepInPlace</span>\n    <span class=\"n\">footWorld</span> <span class=\"o\">=</span> <span class=\"n\">tfBuffer</span><span class=\"o\">.</span><span class=\"n\">lookup_transform</span><span class=\"p\">(</span><span class=\"s1\">&#39;world&#39;</span><span class=\"p\">,</span> <span class=\"n\">foot_frame</span><span class=\"p\">,</span> <span class=\"n\">rospy</span><span class=\"o\">.</span><span class=\"n\">Time</span><span class=\"p\">())</span>\n  <span class=\"n\">File</span> <span class=\"s2\">&quot;/opt/ros/indigo/lib/python2.7/dist-packages/tf2_ros/buffer.py&quot;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">87</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">lookup_transform</span>\n    <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">lookup_transform_core</span><span class=\"p\">(</span><span class=\"n\">target_frame</span><span class=\"p\">,</span> <span class=\"n\">source_frame</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n<span class=\"n\">tf2</span><span class=\"o\">.</span><span class=\"n\">LookupException</span><span class=\"p\">:</span> <span class=\"s2\">&quot;world&quot;</span> <span class=\"n\">passed</span> <span class=\"n\">to</span> <span class=\"n\">lookupTransform</span> <span class=\"n\">argument</span> <span class=\"n\">target_frame</span> <span class=\"n\">does</span> <span class=\"ow\">not</span> <span class=\"n\">exist</span><span class=\"o\">.</span> \n</pre></div>", "type": "rendered"}, "assignee": null, "state": "resolved", "version": null, "edited_on": null, "created_on": "2017-03-13T20:34:01.199674+00:00", "milestone": null, "updated_on": "2017-03-16T19:35:59.345179+00:00", "type": "issue", "id": 106}