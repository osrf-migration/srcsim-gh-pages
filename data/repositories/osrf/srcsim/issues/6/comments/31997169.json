{"links": {"self": {"href": "data/repositories/osrf/srcsim/issues/6/comments/31997169.json"}, "html": {"href": "#!/osrf/srcsim/issues/6#comment-31997169"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/srcsim/issues/6.json"}}, "type": "issue", "id": 6, "repository": {"links": {"self": {"href": "data/repositories/osrf/srcsim.json"}, "html": {"href": "#!/osrf/srcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c41021d9-0217-4628-999d-7f8d82f98dcb}ts=c_plus_plus"}}, "type": "repository", "name": "srcsim", "full_name": "osrf/srcsim", "uuid": "{c41021d9-0217-4628-999d-7f8d82f98dcb}"}, "title": "controller manager dies"}, "content": {"raw": "Hey folks, just wanted to chime in on what's happening from the IHMC side of things. At the very least, this definitely relates to the problem that @dan77062 is having.\n\nThe control algorithm for the robot is designed to run in an environment with a real-time kernel patch and core isolation. On the physical Val hardware this requires a quad core processor with hyper threading and turboboost disabled. We reserve Core 0 for IRQ/interrupt handling, cores 1 and 2 for our state estimation and control algorithm threads respectively, and core 4 for all other processes that have to run. Note that these are physical cores, not virtual cores, because hyper threading is problematic in a realtime environment which is why we disable it on the real robot. This is why we inspect the `sysfs` for the computer topology instead of relying on proc or top or the method that Dan used in his short Java program.\n\nObviously all of that isn't really needed in simulation because we run in lock-step with the physics. We're now tracking this issue as well: https://github.com/ihmcrobotics/ihmc-open-robotics-software/issues/99\n\nWe should have a fix for it and a release in the next few days.", "markup": "markdown", "html": "<p>Hey folks, just wanted to chime in on what's happening from the IHMC side of things. At the very least, this definitely relates to the problem that @dan77062 is having.</p>\n<p>The control algorithm for the robot is designed to run in an environment with a real-time kernel patch and core isolation. On the physical Val hardware this requires a quad core processor with hyper threading and turboboost disabled. We reserve Core 0 for IRQ/interrupt handling, cores 1 and 2 for our state estimation and control algorithm threads respectively, and core 4 for all other processes that have to run. Note that these are physical cores, not virtual cores, because hyper threading is problematic in a realtime environment which is why we disable it on the real robot. This is why we inspect the <code>sysfs</code> for the computer topology instead of relying on proc or top or the method that Dan used in his short Java program.</p>\n<p>Obviously all of that isn't really needed in simulation because we run in lock-step with the physics. We're now tracking this issue as well: <a href=\"https://github.com/ihmcrobotics/ihmc-open-robotics-software/issues/99\" rel=\"nofollow\" class=\"ap-connect-link\">https://github.com/ihmcrobotics/ihmc-open-robotics-software/issues/99</a></p>\n<p>We should have a fix for it and a release in the next few days.</p>", "type": "rendered"}, "created_on": "2016-11-08T16:36:48.700500+00:00", "user": {"display_name": "DouglasS", "uuid": "{ea29a6ad-0ab6-4e98-b04b-530214ed0d17}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Bea29a6ad-0ab6-4e98-b04b-530214ed0d17%7D"}, "html": {"href": "https://bitbucket.org/%7Bea29a6ad-0ab6-4e98-b04b-530214ed0d17%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/0f7a49bbd50256a8d8fff1b2be570bdbd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsD-6.png"}}, "nickname": "DouglasS", "type": "user", "account_id": "557058:64e82c12-2ab2-4ace-b2f6-42a54c96704e"}, "updated_on": "2016-11-08T16:37:12.857671+00:00", "type": "issue_comment", "id": 31997169}