{"links": {"self": {"href": "data/repositories/osrf/srcsim/issues/158/comments/37512826.json"}, "html": {"href": "#!/osrf/srcsim/issues/158#comment-37512826"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/srcsim/issues/158.json"}}, "type": "issue", "id": 158, "repository": {"links": {"self": {"href": "data/repositories/osrf/srcsim.json"}, "html": {"href": "#!/osrf/srcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c41021d9-0217-4628-999d-7f8d82f98dcb}ts=c_plus_plus"}}, "type": "repository", "name": "srcsim", "full_name": "osrf/srcsim", "uuid": "{c41021d9-0217-4628-999d-7f8d82f98dcb}"}, "title": "cloudsim help"}, "content": {"raw": "I can see the docker container process.  Would I be able to see 'python echoserver.py' running through SSH?  I ask because it's in the container and not on the host machine.  \nI think the simpleHTTPserver takes the port as an argument, but my echoserver.py has the port specified in the code.  It works locally, but not through cloudSim.\n\nechoserver.py:\n```\n#!python\n\nimport socket\n\n# Create a TCP/IP socket\nsock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_address = ('192.168.2.10', 5005)\nsock.bind(server_address)\n\n# Listen for incoming connections\nsock.listen(1)\nwhile True:\n    connection, client_address = sock.accept()\n    try:\n        while True:\n            data = connection.recv(16)\n            if data:\n                connection.sendall(data)\n            else:\n                break    finally:\n        connection.close()\n```", "markup": "markdown", "html": "<p>I can see the docker container process.  Would I be able to see 'python echoserver.py' running through SSH?  I ask because it's in the container and not on the host machine.<br />\nI think the simpleHTTPserver takes the port as an argument, but my echoserver.py has the port specified in the code.  It works locally, but not through cloudSim.</p>\n<p>echoserver.py:</p>\n<div class=\"codehilite language-python\"><pre><span></span><span class=\"kn\">import</span> <span class=\"nn\">socket</span>\n\n<span class=\"c1\"># Create a TCP/IP socket</span>\n<span class=\"n\">sock</span> <span class=\"o\">=</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">AF_INET</span><span class=\"p\">,</span> <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">SOCK_STREAM</span><span class=\"p\">)</span>\n<span class=\"n\">server_address</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;192.168.2.10&#39;</span><span class=\"p\">,</span> <span class=\"mi\">5005</span><span class=\"p\">)</span>\n<span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">server_address</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Listen for incoming connections</span>\n<span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">listen</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n    <span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">client_address</span> <span class=\"o\">=</span> <span class=\"n\">sock</span><span class=\"o\">.</span><span class=\"n\">accept</span><span class=\"p\">()</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n                <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">sendall</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"k\">break</span>    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-06-11T21:11:14.488928+00:00", "user": {"display_name": "Jedediyah Williams", "uuid": "{0ed73727-8e01-409a-a6fd-1554e16cd944}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7B0ed73727-8e01-409a-a6fd-1554e16cd944%7D"}, "html": {"href": "https://bitbucket.org/%7B0ed73727-8e01-409a-a6fd-1554e16cd944%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/1ce466e941d68c9b4cf1d88c67ce9d00d=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsJW-2.png"}}, "nickname": "Jedediyah", "type": "user", "account_id": "557058:dc7e05b7-d275-4ba5-8e1e-9f938ef11c7a"}, "updated_on": null, "type": "issue_comment", "id": 37512826}