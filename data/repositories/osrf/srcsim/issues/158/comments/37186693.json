{"links": {"self": {"href": "data/repositories/osrf/srcsim/issues/158/comments/37186693.json"}, "html": {"href": "#!/osrf/srcsim/issues/158#comment-37186693"}}, "issue": {"links": {"self": {"href": "data/repositories/osrf/srcsim/issues/158.json"}}, "type": "issue", "id": 158, "repository": {"links": {"self": {"href": "data/repositories/osrf/srcsim.json"}, "html": {"href": "#!/osrf/srcsim"}, "avatar": {"href": "data/bytebucket.org/ravatar/{c41021d9-0217-4628-999d-7f8d82f98dcb}ts=c_plus_plus"}}, "type": "repository", "name": "srcsim", "full_name": "osrf/srcsim", "uuid": "{c41021d9-0217-4628-999d-7f8d82f98dcb}"}, "title": "cloudsim help"}, "content": {"raw": "That's pretty much exactly what I did. Now I am down to only 4 tries left, even with the expanded hours.  Did you see that the container listing shows no ports exposed when the container is run with the default osrf script?  On the other hand, when I started it with the standard docker call:\n\n```\n#!c++\n\ndocker run --rm --name test all\n\n```\nthe ports show up.  That is true even when I start it locally.  Here is a local example where the same image (\"all\")  is started with the default osrf bash script and then again with just the docker run command and no following parameters, as above.  Somehow the script is blocking the ports from being exposed. \n\n\n```\n#!c++\n\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES\n3cfd6bda04cf        all                 \"/ros_entrypoint.s...\"   7 seconds ago       Up 6 seconds                            team_container\n\nCONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                     NAMES\ndc7553e665a0        all                 \"/ros_entrypoint.s...\"   10 seconds ago      Up 9 seconds        3490-3491/tcp, 8000/tcp   test\n```", "markup": "markdown", "html": "<p>That's pretty much exactly what I did. Now I am down to only 4 tries left, even with the expanded hours.  Did you see that the container listing shows no ports exposed when the container is run with the default osrf script?  On the other hand, when I started it with the standard docker call:</p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">docker</span> <span class=\"n\">run</span> <span class=\"o\">--</span><span class=\"n\">rm</span> <span class=\"o\">--</span><span class=\"n\">name</span> <span class=\"n\">test</span> <span class=\"n\">all</span>\n</pre></div>\n\n\n<p>the ports show up.  That is true even when I start it locally.  Here is a local example where the same image (\"all\")  is started with the default osrf bash script and then again with just the docker run command and no following parameters, as above.  Somehow the script is blocking the ports from being exposed. </p>\n<div class=\"codehilite language-c++\"><pre><span></span><span class=\"n\">CONTAINER</span> <span class=\"n\">ID</span>        <span class=\"n\">IMAGE</span>               <span class=\"n\">COMMAND</span>                  <span class=\"n\">CREATED</span>             <span class=\"n\">STATUS</span>              <span class=\"n\">PORTS</span>               <span class=\"n\">NAMES</span>\n<span class=\"mi\">3</span><span class=\"n\">cfd6bda04cf</span>        <span class=\"n\">all</span>                 <span class=\"s\">&quot;/ros_entrypoint.s...&quot;</span>   <span class=\"mi\">7</span> <span class=\"n\">seconds</span> <span class=\"n\">ago</span>       <span class=\"n\">Up</span> <span class=\"mi\">6</span> <span class=\"n\">seconds</span>                            <span class=\"n\">team_container</span>\n\n<span class=\"n\">CONTAINER</span> <span class=\"n\">ID</span>        <span class=\"n\">IMAGE</span>               <span class=\"n\">COMMAND</span>                  <span class=\"n\">CREATED</span>             <span class=\"n\">STATUS</span>              <span class=\"n\">PORTS</span>                     <span class=\"n\">NAMES</span>\n<span class=\"n\">dc7553e665a0</span>        <span class=\"n\">all</span>                 <span class=\"s\">&quot;/ros_entrypoint.s...&quot;</span>   <span class=\"mi\">10</span> <span class=\"n\">seconds</span> <span class=\"n\">ago</span>      <span class=\"n\">Up</span> <span class=\"mi\">9</span> <span class=\"n\">seconds</span>        <span class=\"mi\">3490</span><span class=\"o\">-</span><span class=\"mi\">3491</span><span class=\"o\">/</span><span class=\"n\">tcp</span><span class=\"p\">,</span> <span class=\"mi\">8000</span><span class=\"o\">/</span><span class=\"n\">tcp</span>   <span class=\"n\">test</span>\n</pre></div>", "type": "rendered"}, "created_on": "2017-05-26T20:28:56.246739+00:00", "user": {"display_name": "dan", "uuid": "{a93bd0ec-35fc-49a5-aa8a-b0b57403c2d0}", "links": {"self": {"href": "https://api.bitbucket.org/2.0/users/%7Ba93bd0ec-35fc-49a5-aa8a-b0b57403c2d0%7D"}, "html": {"href": "https://bitbucket.org/%7Ba93bd0ec-35fc-49a5-aa8a-b0b57403c2d0%7D/"}, "avatar": {"href": "data/secure.gravatar.com/avatar/dd56d3105d7602d83d5c35a320f6b36cd=httpsavatar-management--avatars.us-west-2.prod.public.atl-paas.netinitialsD-6.png"}}, "nickname": "dan77062", "type": "user", "account_id": "557058:e0e36946-cb60-4776-8f47-2e9a0285ad35"}, "updated_on": "2017-05-26T20:36:41.074336+00:00", "type": "issue_comment", "id": 37186693}